Jenkins + Docker Project Tasks Completed

Task 1: Install Jenkins on Ubuntu EC2
Installed Java and Jenkins
Enabled Jenkins service and firewall ports
Set up admin user interface

Task 2: Jenkins Freestyle Job (GitHub Clone)
Created a Jenkins Freestyle Job
Cloned a public GitHub repository using Git SCM

Task 3: Trigger Jenkins with GitHub Webhook
Added webhook to GitHub repository
Configured Jenkins to poll SCM or trigger on webhook
Verified automatic build on GitHub push

Task 4: GitHub Repo Setup (python-jenkins)
Created GitHub repository manually
Generated GitHub PAT (Personal Access Token)
Initialized local git repo and pushed code using PAT

Task 5: Jenkinsfile for Flask App
Wrote a Jenkinsfile with pipeline stages:
Clone
Build Docker image
Run container

Task 6: Jenkins Pipeline Job from GitHub

Used "Pipeline from SCM"
Connected to GitHub main branch
Triggered job and resolved branch errors

Task 7: Docker + Jenkins Pipeline Integration

Confirmed Docker installation on Jenkins server
Built and ran Flask app using Docker inside Jenkins pipeline

Task 8: Docker Installation for Jenkins
Installed Docker on EC2 Jenkins host
Added Jenkins user to Docker group
Restarted Jenkins to apply changes

Task 9: Push Docker Image to Docker Hub
Created Docker Hub account/repo
Added DockerHub credentials in Jenkins
Used docker login and docker push from Jenkinsfile

Task 10: Docker Compose Deployment with Nginx
Created a simple static website with index.html
Built Docker image using Dockerfile
Wrote docker-compose.yml to deploy container
Jenkins pipeline stages:
Clone from GitHub
Build Docker image

Push image to Docker Hub
Deploy using docker-compose
Accessed via http://<EC2-IP>:8080

Task 11: Jenkins CI/CD for Docker Compose App (Nginx Static Website)
We will:

Use Nginx as a simple web server
Create a static website (e.g., index.html)
Write a Dockerfile to package it
Use Docker Compose to run the container
Automate everything via a Jenkins pipeline
web-compose-app/
â”œâ”€â”€ index.html
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ docker-compose.yml
â”œâ”€â”€ Jenkinsfile

Task 12: CI/CD with Docker Compose for a 2-Tier Web App (Nginx + PHP or Node + MySQL)
This task will help you learn how to:

Use multiple containers (web + database)
Connect them using Docker Compose networks
Manage CI/CD using Jenkins Pipeline
Push images to Docker Hub
Automate everything via GitHub + Jenkins
App Architecture:
web-compose-2tier/
â”œâ”€â”€ docker-compose.yml
â”œâ”€â”€ nginx/
â”‚   â””â”€â”€ index.html (or index.php)
â”œâ”€â”€ db/
â”‚   â””â”€â”€ init.sql (optional for seeding)
â”œâ”€â”€ Jenkinsfile

Component	Tech
Frontend -	Nginx (or PHP/Node)
Backend -	MySQL
Orchestration -	Docker Compose
CI/CD	- Jenkins
Git Repo	-   GitHub
Image Store - 	Docker Hub

(or)

 Nginx (Frontend) + MySQL (Database) using Docker Compose (2-tier Architecture)
ðŸ”§ What is 2-tier architecture?
In a 2-tier app:
Tier 1: Frontend (Nginx) â€“ Static web UI (HTML/JS/CSS)
Tier 2: Backend Database (MySQL) â€“ Stores data like user info, products, etc.
